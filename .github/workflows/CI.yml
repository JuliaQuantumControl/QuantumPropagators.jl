name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - run: |
          # Install matplotlib into system Python
          set -x
          /usr/bin/python3 -m pip install matplotlib
      - run: |
          # Instantiate Pkg
          julia --project=@. -e '
            using Pkg
            println("Dev-install QuantumControlBase")
            Pkg.develop(url="https://github.com/JuliaQuantumControl/QuantumControlBase.jl.git#master")
            println("Pkg.instantiate()")
            Pkg.instantiate()'
      - run: |
          # Run tests
          julia --project=@. -e '
            using Pkg
            Pkg.activate(".")
            Pkg.test(coverage=true)'
      - run: |
          # Run upstream "QuantumControlBase" tests
          julia --project=@. -e '
            using Pkg
            Pkg.activate(".")
            Pkg.develop(url="https://github.com/JuliaQuantumControl/QuantumControlBase.jl.git#master")
            Pkg.test("QuantumControlBase", coverage=true)'
      - run: |
          # Run upstream "Krotov" tests
          julia --project=@. -e '
            using Pkg
            Pkg.activate(".")
            Pkg.develop(url="https://github.com/JuliaQuantumControl/GRAPE.jl.git#master")
            Pkg.develop(url="https://github.com/JuliaQuantumControl/Krotov.jl.git#master")
            Pkg.develop(url="https://github.com/JuliaQuantumControl/QuantumControl.jl.git#master")
            Pkg.test("Krotov", coverage=true)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          # Instantiate dev env
          julia --project=test -e '
            using Pkg
            println("Dev-install package")
            Pkg.develop(PackageSpec(path=pwd()))
            println("Pkg.instantiate()")
            Pkg.instantiate()'
      - run: |
          # Run doctests
          julia --project=test -e '
            using Documenter: DocMeta, doctest
            using QuantumPropagators
            DocMeta.setdocmeta!(QuantumPropagators, :DocTestSetup, :(using QuantumPropagators); recursive=true)
            doctest(QuantumPropagators)'
      - run: |
          # Make documentation
          julia --project=test docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Get codestyle settings
        run: wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/.JuliaFormatter.toml
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(".", verbose=true)'
      - name: Format check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'
