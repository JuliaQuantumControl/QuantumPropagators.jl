name: CI
on:
  push:
    branches:
      - master
      - dev
      - 'release-*'
    tags:
      - '*'
  pull_request:
    branches:
      - master
env:
  GKSwstype: 100
  JULIA_PKG_PRECOMPILE_AUTO: false
jobs:
  test:
    name: Test ${{ matrix.title }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - title: 'Linux - Latest'
            os: ubuntu-latest
            version: '1'
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - uses: julia-actions/cache@v2
      - name: "Instantiate test environment"
        run: |
          wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/scripts/installorg.jl
          julia --project=test installorg.jl
      - name: "Run tests"
        shell: julia --color=yes --project=test --code-coverage="@" --depwarn="yes" --check-bounds="yes" {0}
        run: |
          include(joinpath(pwd(), "test", "runtests.jl"))
      - name: "Run upstream Krotov tests"
        shell: julia --color=yes --project=test --code-coverage="@" --depwarn="yes" --check-bounds="yes" {0}
        run: |
          using Pkg
          Pkg.test("Krotov", coverage=true)
      - name: "Run upstream GRAPE tests"
        shell: julia --color=yes --project=test --code-coverage="@" --depwarn="yes" --check-bounds="yes" {0}
        run: |
          using Pkg
          Pkg.test("GRAPE", coverage=true)
      - uses: julia-actions/julia-processcoverage@v1
      - name: "Summarize coverage"
        run: julia --project=test -e 'using QuantumControlTestUtils; show_coverage();'
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - run: |
          # Install Python dependencies
          set -x
          /usr/bin/python3 -m pip install zip-files
      - name: Instantiate Pkg
        run: |
          wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/scripts/installorg.jl
          julia --project=test installorg.jl
      - name: Make documentations
        run: julia --project=test docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Zip the HTML documentation
        run: zip-folder --debug --auto-root --outfile "docs.zip" docs/build
      - uses: actions/upload-artifact@v4
        name: Upload documentation artifacts
        with:
          name: QuantumPropagators
          # We need at least two files in the artifact to avoid a weird
          # double-zip file. Hence README.md
          path: |
            README.md
            ./docs.zip
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Get typos settings
        run: wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/typos.toml
      - name: Spell Check
        uses: crate-ci/typos@master
      - name: Version Check
        shell: julia {0}
        run: |
          using Pkg
          VERSION = VersionNumber(Pkg.TOML.parsefile("Project.toml")["version"])
          BRANCH = ENV["GITHUB_REF_NAME"]
          if ENV["GITHUB_EVENT_NAME"] == "pull_request"
              # For pull_request events, return the head (aka., "from") branch,
              # not the base (aka., "to") branch.
              BRANCH = ENV["GITHUB_HEAD_REF"]
          end
          if startswith(BRANCH, "release-")
              if (length(VERSION.prerelease) == length(VERSION.build))
                  println("Version $VERSION on release branch OK")
              else
                  @error "Invalid version $VERSION on release branch"
                  exit(1)
              end
          elseif (ENV["GITHUB_REF_TYPE"] == "branch") && (BRANCH != "master")
              if ("dev" in VERSION.prerelease) || ("dev" in VERSION.build)
                  println("Version $VERSION OK with dev-suffix on $BRANCH")
              else
                  @error "Invalid version $VERSION on branch $BRANCH: must contain dev suffix"
                  exit(1)
              end
          else
              println("Version $VERSION OK on $BRANCH")
          end
          exit(0)
      - name: Get codestyle settings
        run: wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/.JuliaFormatter.toml
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(".", verbose=true)'
      - name: Format check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'
