using Test
using QuantumPropagators
using QuantumPropagators.Generators
using QuantumPropagators.Controls
using LinearAlgebra
using Distributions
using QuantumControlTestUtils.RandomObjects: random_matrix, random_state_vector
using SparseArrays


@testset "TLS dissipation" begin

    function ket(i)
        Œ® = zeros(ComplexF64, 2)
        Œ®[i+1] = 1.0
        return Œ®
    end

    bra(i) = adjoint(ket(i))

    ketbra(i, j) = ket(i) * bra(j)

    Œ≥‚ÇÅ = 0.5
    Œ≥‚ÇÇ = 0.2

    AÃÇ·µß‚ÇÅ = ‚àöŒ≥‚ÇÅ * ketbra(0, 1)
    AÃÇ·µß‚ÇÇ = ‚àö(2Œ≥‚ÇÇ) * ketbra(1, 1)

    Œ®‚ÇÄ = (ket(0) + ket(1)) / ‚àö2
    œÅ‚Éó‚ÇÄ = reshape(Œ®‚ÇÄ * Œ®‚ÇÄ', :)
    ‚Ñí_op = liouvillian(nothing, [AÃÇ·µß‚ÇÅ, AÃÇ·µß‚ÇÇ]; convention = :TDSE)
    ‚Ñí = Array(‚Ñí_op)

    T = 1.0
    tlist = [0.0, T]

    œÅ‚Éó_out = propagate(œÅ‚Éó‚ÇÄ, ‚Ñí, tlist; method = :expprop)
    œÅ_out = reshape(œÅ‚Éó_out, 2, 2)

    #! format: off
    œÅ_expected = 0.5 * ComplexF64[
            (2-exp(-Œ≥‚ÇÅ*T))    (exp(-(Œ≥‚ÇÅ/2 + Œ≥‚ÇÇ)*T));
        (exp(-(Œ≥‚ÇÅ/2 + Œ≥‚ÇÇ)*T))       (exp(-Œ≥‚ÇÅ*T))
    ]
    #! format: on

    @test abs(1 - tr(œÅ_out)) < 1e-15 # total population
    @test abs(tr(œÅ_out^2)) < 1.0  # purity
    @test norm(œÅ_out - œÅ_expected) < 1e-15

end


@testset "LvN" begin

    N = 100

    function ket(i)
        Œ® = zeros(ComplexF64, N)
        Œ®[i] = 1.0
        return Œ®
    end

    bra(i) = adjoint(ket(i))

    ketbra(i, j) = ket(i) * bra(j)

    HÃÇ‚ÇÄ = random_matrix(N; hermitian = true, spectral_radius = 1)
    HÃÇ‚ÇÅ = random_matrix(N; hermitian = true, spectral_radius = 0.1)

    œµ(t) = 1.0
    H = (HÃÇ‚ÇÄ, (HÃÇ‚ÇÅ, œµ))
    HÃÇ = H[1] + H[2][1] * H[2][2](0)

    Œ®‚ÇÄ = random_state_vector(N)
    œÅ‚ÇÄ = Œ®‚ÇÄ * Œ®‚ÇÄ'
    œÅ‚Éó‚ÇÄ = reshape(œÅ‚ÇÄ, :)
    ùïö = 1im

    ‚Ñí_nodiss = liouvillian(HÃÇ; convention = :LvN)
    @test ‚Ñí_nodiss isa SparseMatrixCSC{ComplexF64,Int64}
    @test norm(ùïö * (HÃÇ * œÅ‚ÇÄ - œÅ‚ÇÄ * HÃÇ) - reshape(‚Ñí_nodiss * œÅ‚Éó‚ÇÄ, N, N)) < 1e-15

    ‚Ñí_nodiss = liouvillian(HÃÇ; convention = :TDSE)
    @test ‚Ñí_nodiss isa SparseMatrixCSC{ComplexF64,Int64}
    @test norm((HÃÇ * œÅ‚ÇÄ - œÅ‚ÇÄ * HÃÇ) - reshape(‚Ñí_nodiss * œÅ‚Éó‚ÇÄ, N, N)) < 1e-15

    Œ≥‚ÇÅ = 0.2
    decay_to_ground = [‚àöŒ≥‚ÇÅ * ketbra(1, i) for i ‚àà 2:N]

    Œ≥‚ÇÇ = 0.1
    dephasing = [‚àöŒ≥‚ÇÇ * ketbra(i, i) for i ‚àà 1:N]

    c_ops = (decay_to_ground..., dephasing...)

    L = liouvillian(HÃÇ‚ÇÄ, c_ops; convention = :LvN)
    @test L isa SparseMatrixCSC
    œÅÃá_LvN = (
        ùïö * (HÃÇ‚ÇÄ * œÅ‚ÇÄ - œÅ‚ÇÄ * HÃÇ‚ÇÄ) +
        sum([(A * œÅ‚ÇÄ * A' - (A' * A * œÅ‚ÇÄ) / 2 - (œÅ‚ÇÄ * A' * A) / 2) for A ‚àà c_ops])
    )
    œÅÃá = reshape(L * œÅ‚Éó‚ÇÄ, N, N)
    @test norm(œÅÃá - œÅÃá_LvN) < 1e-15

    L = liouvillian(H, c_ops; convention = :LvN)
    t = 0.0
    ‚Ñí = L.ops[1] + L.ops[2] * L.amplitudes[1](t)
    L0 = evaluate(L, t)
    @test norm(‚Ñí - Array(L0)) < 1e-12

    L = liouvillian(hamiltonian(H...), c_ops; convention = :LvN)
    L0 = evaluate(L, t)
    @test norm(‚Ñí - Array(L0)) < 1e-12

    œÅÃá_LvN = (
        ùïö * (HÃÇ * œÅ‚ÇÄ - œÅ‚ÇÄ * HÃÇ) +
        sum([(A * œÅ‚ÇÄ * A' - (A' * A * œÅ‚ÇÄ) / 2 - (œÅ‚ÇÄ * A' * A) / 2) for A ‚àà c_ops])
    )

    œÅÃá = reshape(‚Ñí * œÅ‚Éó‚ÇÄ, N, N)

    @test norm(œÅÃá - œÅÃá_LvN) < 1e-15

end
